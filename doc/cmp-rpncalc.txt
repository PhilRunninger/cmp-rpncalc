*cmp-rpncalc.txt*        An nvim-cmp completion source for RPN math calculations

                                                               *cmp-rpncalc* *rpn*
  __        __      __   __        __             __ ~
 /  ` |\/| |__) __ |__) |__) |\ | /  `  /\  |    /  `~
 \__, |  | |       |  \ |    | \| \__, /~~\ |___ \__,~

Reverse Polish Notation, RPN for short, is a mathematical notation in which
operators follow their operands, in contrast to Polish notation (PN), in which
operators precede their operands. The description "Polish" refers to the
nationality of logician Jan ≈Åukasiewicz, who invented Polish notation in 1924.
                       - https://en.wikipedia.org/wiki/Reverse_Polish_notation

==============================================================================
                                                                  *rpn-operands*

Numbers, formally called operands, are pushed onto a stack in the order they
are read by the processor. The top number on the stack is called X, with Y, Z,
W, and other unnamed positions underneath. When an operator is encountered, X
and maybe other numbers are popped off the stack, and the result of the
operation is pushed back onto the stack.

Operands can take on any of these forms:
  Decimal - integer, floating point, scientific notation
  Binary - `0b` prefix, followed by digits `0` and `1`.
  Hexadecimal - `0x` prefix, followed by digits `0`-`9` and letters `a`-`f`.
  Complex - an ordered pair of numbers in any of the above formats. For
            example `1.2,-0x43` represents `1.2-67i`.

==============================================================================
                                                                 *rpn-operators*

Most operators work on complex numbers. Exceptions are noted below.

|Basic_Arithmetic|  `+      -      *      /      div    %     abs  arg  chs`
|Powers_&_Logs|     `exp    ln     log    log2   logx   sqrt  **   \`
|Trigonometry|      `sin    cos    tan    csc    sec    cot`
                  `asin   acos   atan   acsc   asec   acot`
                  `sinh   cosh   tanh   csch   sech   coth`
                  `asinh  acosh  atanh  acsch  asech  acoth`
|Bitwise|           `&      |      ^      <<     >>     ~`
|Rounding|          `floor  ceil  round  trunc`
|Constants|         `pi     e     phi    i`
|Statistics|        `!      perm  comb   mean    std    sum   ssq   n`
|Memory_&_Stack|    `sto    rcl   m+     m-      xy     x     drop`
|Miscellaneous|     `hrs    hms`

==============================================================================
*Basic_Arithmetic*                                           *rpn-basic-operators*

  `+`    Addition
  `-`    Subtraction
  `*`    Multiplication
  `/`    Division
  `div`  Integer division
  `%`    Remainder of Y / X (real numbers only)
  `abs`  Absolute value
  `arg`  Argument - the angle between the positive x-axis and X
  `chs`  Change sign of X

*Powers_&_Logs*                            *rpn-power-operators* *rpn-log-operators*

  `exp`   Exponential function: e to the X power
  `ln`    Natural log: ln(X)
  `log`   Common log (base 10) of X
  `log2`  Log (base 2) of X
  `logx`  Log (base X) of Y
  `sqrt`  Square root of X
  `**`    Exponentiation: Y to the X power
  `\`     Reciprocal of X

*Trigonometry*                                        *rpn-trigonometry-operators*

  `deg`  Convert X from radians to degrees
  `rad`  Convert X from degrees to radians

  Ordinary
    `sin`    Sine of X radians         `asin`   Inverse
    `cos`    Cosine of X radians       `acos`   Inverse
    `tan`    Tangent of X radians      `atan`   Inverse
    `csc`    Cosecant of X radians     `acsc`   Inverse
    `sec`    Secant of X radians       `asec`   Inverse
    `cot`    Cotangent of X radians    `acot`   Inverse

  Hyperbolic
    `sinh`   Hyperbolic Sine of X radians        `asinh`  Inverse
    `cosh`   Hyperbolic Cosine of X radians      `acosh`  Inverse
    `tanh`   Hyperbolic Tangent of X radians     `atanh`  Inverse
    `csch`   Hyperbolic Cosecant of X radians    `acsch`  Inverse
    `sech`   Hyperbolic Secant of X radians      `asech`  Inverse
    `coth`   Hyperbolic Cotangent of X radians   `acoth`  Inverse

*Bitwise*                                                  *rpn-bitwise-operators*

  These operators work best with natural numbers, and don't work at all with
  complex numbers.

  `&`  AND         `10 7 &`  is `2`  In binary, 1010 AND 111 = 10
  `|`  OR          `10 6 |`  is `14`             1010 OR 110 = 1110
  `^`  XOR         `10 3 ^`  is `9`              1010 XOR 11 = 1001
  `~`  NOT         `42 ~`    is `-43`               101010 ~ = 1...111111110101
  `<<` Left Shift  `5 3 <<`  is `40`                101 << 3 = 101000
  `>>` Right Shift `58 2 >>` is `14`             111010 >> 2 = 1110

*Rounding*                                                *rpn-rounding-operators*

  `floor` Round down towards -infinity
  `ceil`  Round up towards +infinity
  `round` Round up or down to nearest integer
  `trunc` Round toward zero

*Constants*                                                        *rpn-constants*

  `pi`  - The ratio of a circle's circumference to its diameter: `3.1415926535...`
  `e`   - Euler's number: `2.7182818284590...`
  `phi` - The golden ratio: `1.6180339887499...`
  `i`   - The imaginary unit: `0+1i`

*Statistics*                                            *rpn-statistics-operators*

  `!`    - Factorial (natural numbers only)
  `perm` - Permutation of Y things taken X at a time (natural numbers only)
  `comb` - Combination of Y things taken X at a time (natural numbers only)
  `mean` - Average of all numbers on the stack (real and complex numbers)
  `std`  - Sample standard deviation of the entire stack (real numbers only)
  `sum`  - Sum of all numbers on the stack (real and complex numbers)
  `ssq`  - Sum of squares of all numbers on the stack (real and complex numbers)
  `n`    - Sample size (real and complex numbers)

*Memory_&_Stack*                        *rpn-memory-operators* *rpn_stack-operators*

  `sto`  - Store the value of X to memory
  `rcl`  - Recall the value in memory and put it on the stack
  `m+`   - Add X to the value in memory
  `m-`   - Subtract X from the value in memory
  `xy`   - Swap X and Y on the stack
  `x`    - Place the value of X from the last operation back on the stack
  `drop` - Remove X from the stack

*Miscellaneous*                                      *rpn-miscellaneous-operators*

  These functions work only with real numbers.

  `hrs` - Convert hours, minutes, seconds to hours. `3 37 30 hrs` is `3.625`
  `hms` - Convert hours to hours, minutes, seconds. `3.625 hms` is `3 37 30`
  `bin` - Print results in binary.
  `hex` - Print results in hexadecimal.
  `dec` - Print results in decimal.
